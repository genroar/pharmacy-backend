generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  email         String          @unique
  password      String
  name          String
  role          UserRole        @default(CASHIER)
  branchId      String
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String?
  card_details  card_details[]
  receipts      Receipt[]
  refunds       Refund[]
  sales         Sale[]
  subscriptions subscriptions[]
  branch        Branch          @relation(fields: [branchId], references: [id])

  @@map("users")
}

model Employee {
  id                       String         @id @default(cuid())
  employeeId               String         @unique
  name                     String
  email                    String         @unique
  phone                    String?
  address                  String?
  position                 String
  department               String?
  salary                   Float?
  hireDate                 DateTime
  status                   EmployeeStatus @default(ACTIVE)
  branchId                 String
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  isActive                 Boolean        @default(true)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  attendance               Attendance[]
  commissions              Commission[]
  branch                   Branch         @relation(fields: [branchId], references: [id])
  shifts                   Shift[]

  @@map("employees")
}

model Branch {
  id          String       @id @default(cuid())
  name        String       @unique
  address     String
  phone       String
  email       String
  managerId   String?
  createdBy   String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendance  Attendance[]
  commissions Commission[]
  customers   Customer[]
  employees   Employee[]
  products    Product[]
  receipts    Receipt[]
  sales       Sale[]
  shifts      Shift[]
  users       User[]

  @@map("branches")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@unique([name, createdBy], name: "category_name_per_admin")
  @@map("categories")
}

model Supplier {
  id            String    @id @default(cuid())
  name          String    @unique
  contactPerson String
  phone         String
  email         String
  address       String
  createdBy     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]

  @@map("suppliers")
}

model Product {
  id                   String          @id @default(cuid())
  name                 String
  description          String?
  sku                  String          @unique
  categoryId           String
  supplierId           String
  branchId             String
  createdBy            String?
  costPrice            Float
  sellingPrice         Float
  stock                Int             @default(0)
  minStock             Int             @default(10)
  maxStock             BigInt?
  unitType             String
  unitsPerPack         Int             @default(1)
  barcode              String?         @unique
  requiresPrescription Boolean         @default(false)
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  expiryDate           DateTime?
  branch               Branch          @relation(fields: [branchId], references: [id])
  category             Category        @relation(fields: [categoryId], references: [id])
  supplier             Supplier        @relation(fields: [supplierId], references: [id])
  refundItems          RefundItem[]
  saleItems            SaleItem[]
  stockMovements       StockMovement[]

  @@map("products")
}

model StockMovement {
  id        String            @id @default(cuid())
  productId String
  type      StockMovementType
  quantity  Int
  reason    String?
  reference String?
  createdAt DateTime          @default(now())
  createdBy String?
  product   Product           @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Customer {
  id             String    @id @default(cuid())
  name           String
  phone          String    @unique
  email          String?
  address        String?
  branchId       String
  createdBy      String?
  totalPurchases Float     @default(0)
  loyaltyPoints  Int       @default(0)
  isVIP          Boolean   @default(false)
  lastVisit      DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  branch         Branch    @relation(fields: [branchId], references: [id])
  sales          Sale[]

  @@map("customers")
}

model Sale {
  id             String        @id @default(cuid())
  customerId     String?
  userId         String
  branchId       String
  createdBy      String?
  subtotal       Float
  taxAmount      Float
  discountAmount Float         @default(0)
  totalAmount    Float
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PENDING)
  status         SaleStatus    @default(COMPLETED)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  receipts       Receipt[]
  refunds        Refund[]      @relation("SaleRefunds")
  items          SaleItem[]
  branch         Branch        @relation(fields: [branchId], references: [id])
  customer       Customer?     @relation(fields: [customerId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@map("sales")
}

model SaleItem {
  id          String    @id @default(cuid())
  saleId      String
  productId   String
  createdBy   String?
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  batchNumber String?
  expiryDate  DateTime?
  product     Product   @relation(fields: [productId], references: [id])
  sale        Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}

model Receipt {
  id            String   @id @default(cuid())
  saleId        String
  userId        String
  branchId      String
  createdBy     String?
  receiptNumber String   @unique
  printedAt     DateTime @default(now())
  branch        Branch   @relation(fields: [branchId], references: [id])
  sale          Sale     @relation(fields: [saleId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@map("receipts")
}

model Refund {
  id             String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  originalSaleId String
  refundReason   String
  refundAmount   Decimal       @db.Decimal(10, 2)
  refundedBy     String
  createdBy      String?
  status         refund_status @default(PENDING)
  processedAt    DateTime?     @db.Timestamp(6)
  createdAt      DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?     @default(now()) @updatedAt @db.Timestamp(6)
  items          RefundItem[]
  originalSale   Sale          @relation("SaleRefunds", fields: [originalSaleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  refundedByUser User          @relation(fields: [refundedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("refunds")
}

model RefundItem {
  id        String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  refundId  String
  productId String
  createdBy String?
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  reason    String
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  refund    Refund  @relation(fields: [refundId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("refund_items")
}

model Attendance {
  id         String           @id @default(cuid())
  employeeId String
  branchId   String
  checkIn    DateTime
  checkOut   DateTime?
  totalHours Float?
  status     AttendanceStatus @default(PRESENT)
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  branch     Branch           @relation(fields: [branchId], references: [id])
  employee   Employee         @relation(fields: [employeeId], references: [id])

  @@map("attendance")
}

model Shift {
  id              String      @id @default(cuid())
  employeeId      String
  branchId        String
  shiftDate       DateTime
  startTime       DateTime
  endTime         DateTime?
  openingBalance  Float       @default(0)
  cashIn          Float       @default(0)
  cashOut         Float       @default(0)
  expectedBalance Float?
  actualBalance   Float?
  difference      Float?
  status          ShiftStatus @default(ACTIVE)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  branch          Branch      @relation(fields: [branchId], references: [id])
  employee        Employee    @relation(fields: [employeeId], references: [id])

  @@map("shifts")
}

model Commission {
  id                String           @id @default(cuid())
  employeeId        String
  branchId          String
  period            String
  periodType        PeriodType       @default(MONTHLY)
  totalSales        Float            @default(0)
  totalTransactions Int              @default(0)
  averageSale       Float            @default(0)
  baseRate          Float            @default(0.02)
  bonusRate         Float            @default(0)
  totalCommission   Float            @default(0)
  bonusAmount       Float            @default(0)
  totalAmount       Float            @default(0)
  status            CommissionStatus @default(PENDING)
  paidAt            DateTime?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  branch            Branch           @relation(fields: [branchId], references: [id])
  employee          Employee         @relation(fields: [employeeId], references: [id])

  @@map("commissions")
}

model card_details {
  id          String   @id
  userId      String
  last4       String
  brand       String
  expiryMonth Int
  expiryYear  Int
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       User     @relation(fields: [userId], references: [id])
}

model subscriptions {
  id              String             @id
  userId          String
  planName        String
  status          SubscriptionStatus @default(PENDING)
  startDate       DateTime
  endDate         DateTime
  amount          Float
  currency        String             @default("USD")
  autoRenew       Boolean            @default(true)
  nextBillingDate DateTime
  createdAt       DateTime           @default(now())
  updatedAt       DateTime
  users           User               @relation(fields: [userId], references: [id])
}

model Settings {
  id          String   @id @default(cuid())
  createdBy   String
  key         String
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([createdBy, key], name: "createdBy_key")
  @@map("settings")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  CASHIER
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  RETURN
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  LEAVE
}

enum ShiftStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}

enum refund_status {
  PENDING
  PROCESSED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}
